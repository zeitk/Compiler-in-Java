///////////////////////////////////////////////////////////////////////////////
//                   ALL STUDENTS COMPLETE THESE SECTIONS
// Title:        	brevis.jlex   
// Files:          	brevis.jlex
// Semester:         	Spring 2023
//
// Author: 		Cory Sterner
// Email: 		cdsterner@wisc.edu
// CS Login:		sterner
// Lecturer's Name:	Beck Hasti
// Lab Section:   	
//
//////////////////// PAIR PROGRAMMERS COMPLETE THIS SECTION ////////////////////
//
//                   CHECK ASSIGNMENT PAGE TO see IF PAIR-PROGRAMMING IS ALLOWED
//                   If pair programming is allowed:
//                   1. Read PAIR-PROGRAMMING policy (in cs302 policy) 
//                   2. choose a partner wisely
//                   3. REGISTER THE TEAM BEFORE YOU WORK TOGETHER 
//                      a. one partner creates the team
//                      b. the other partner must join the team
//                   4. complete this section for each program file.
//
// Pair Partner:     John Kellet 
// Email:            (email address of your programming partner)
// CS Login:         (partner's login name)
// Lecturer's Name:  Beck Hasti 
// Lab Section:      (your partner's lab section number)
//
//////////////////// STUDENTS WHO GET HELP FROM OTHER THAN THEIR PARTNER //////
//                   must fully acknowledge and credit those sources of help.
//                   Instructors and TAs do not have to be credited here,
//                   but tutors, roommates, relatives, strangers, etc do.
//
// Persons:          Identify persons by name, relationship to you, and email.
//                   Describe in detail the the ideas and help they provided.
//
// Online sources:   avoid web searches to solve your problems, but if you do
//                   search, be sure to include Web URLs and description of 
//                   of any information you find.
//////////////////////////// 80 columns wide //////////////////////////////////
import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.
  
class TokenVal {
  // fields
    int lineNum;
    int charNum;
  // constructor
    TokenVal(int lineNum, int charNum) {
        this.lineNum = lineNum;
        this.charNum = charNum;
    }
}
  
class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int lineNum, int charNum, int intVal) {
        super(lineNum, charNum);
        this.intVal = intVal;
    }
}
  
class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int lineNum, int charNum, String idVal) {
        super(lineNum, charNum);
        this.idVal = idVal;
    }
}
  
class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int lineNum, int charNum, String strVal) {
        super(lineNum, charNum);
        this.strVal = strVal;
    }
}
  
// The following class is used to keep track of the character number at 
// which the current token starts on its line.
class CharNum {
    static int num = 1;
}
%%

DIGIT=          [0-9]
WHITESPACE=     [\040\t]
LETTER=		[a-zA-Z]
COMMENT=	[#"//"]
STRINGTEXT=     (\\{ESCAPECHAR}|[^\\\n\"])*
ESCAPECHAR =    [nt'\"?\\]
BADESCAPECHAR= 	[^nt'\"?\\]

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

void {
	Symbol S = new Symbol(sym.VOID,
			new TokenVal(yyline+1, CharNum.num));
	CharNum.num += yytext().length();
	return S;
	}

boolean {
        Symbol S = new Symbol(sym.BOOL,
                        new TokenVal(yyline+1, CharNum.num));
        CharNum.num += yytext().length(); 
        return S;
        }

integer {
        Symbol S = new Symbol(sym.INT,
                        new TokenVal(yyline+1, CharNum.num));
        CharNum.num += yytext().length(); 
        return S;
        }

true {
        Symbol S = new Symbol(sym.TRUE,
                        new TokenVal(yyline+1, CharNum.num));
        CharNum.num += yytext().length(); 
        return S;
        }

false {
        Symbol S = new Symbol(sym.FALSE,
                        new TokenVal(yyline+1, CharNum.num));
        CharNum.num += yytext().length(); 
        return S;
        }

record {
        Symbol S = new Symbol(sym.RECORD,
                        new TokenVal(yyline+1, CharNum.num));
        CharNum.num += yytext().length(); 
        return S;
        }

scan {
        Symbol S = new Symbol(sym.SCAN,
                        new TokenVal(yyline+1, CharNum.num));
        CharNum.num += yytext().length(); 
        return S;
        }

print {
        Symbol S = new Symbol(sym.PRINT,
                        new TokenVal(yyline+1, CharNum.num));
        CharNum.num += yytext().length(); 
        return S;
        }

if {
        Symbol S = new Symbol(sym.IF,
                        new TokenVal(yyline+1, CharNum.num));
        CharNum.num += yytext().length(); 
        return S;
        }

else {
        Symbol S = new Symbol(sym.ELSE,
                        new TokenVal(yyline+1, CharNum.num));
        CharNum.num += yytext().length(); 
        return S;
        }

while {
        Symbol S = new Symbol(sym.WHILE,
                        new TokenVal(yyline+1, CharNum.num));
        CharNum.num += yytext().length(); 
        return S;
        }

return {
        Symbol S = new Symbol(sym.RETURN,
                        new TokenVal(yyline+1, CharNum.num));
        CharNum.num += yytext().length(); 
        return S;
        }

"{"	{ Symbol S = new Symbol(sym.LCURLY,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++; 
        return S;
        }

"}" { Symbol S = new Symbol(sym.RCURLY,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return S;
        }

"(" { Symbol S = new Symbol(sym.LPAREN,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return S;
        }

")" { Symbol S = new Symbol(sym.RPAREN,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return S;
        }

";" { Symbol S = new Symbol(sym.SEMICOLON,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return S;
        }

"," { Symbol S = new Symbol(sym.COMMA,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return S;
        }

"." { Symbol S = new Symbol(sym.DOT,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return S;
        }

"<-" { Symbol S = new Symbol(sym.WRITE,new TokenVal(yyline+1, CharNum.num));
        CharNum.num = CharNum.num + 2;
        return S;
        }

"->" { Symbol S = new Symbol(sym.READ,new TokenVal(yyline+1, CharNum.num));
        CharNum.num = CharNum.num + 2;
        return S;
        }

"++" { Symbol S = new Symbol(sym.PLUSPLUS,new TokenVal(yyline+1, CharNum.num));
        CharNum.num = CharNum.num + 2;
        return S;
        }

"--" { Symbol S = new Symbol(sym.MINUSMINUS,new TokenVal(yyline+1, CharNum.num));
        CharNum.num = CharNum.num + 2;
        return S;
        }

"-" { Symbol S = new Symbol(sym.MINUS,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return S;
        }

"*" { Symbol S = new Symbol(sym.TIMES,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return S;
        }

"/" { Symbol S = new Symbol(sym.DIVIDE,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return S;
        }

\\  { Symbol S = new Symbol(sym.NOT,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return S;
        }

"&&" { Symbol S = new Symbol(sym.AND,new TokenVal(yyline+1, CharNum.num));
        CharNum.num = CharNum.num + 2;
        return S;
        }

"||" { Symbol S = new Symbol(sym.OR,new TokenVal(yyline+1, CharNum.num));
        CharNum.num = CharNum.num + 2;
        return S;
        }

"==" { Symbol S = new Symbol(sym.EQUALS,new TokenVal(yyline+1, CharNum.num));
        CharNum.num = CharNum.num + 2;
        return S;
        }

"\=" { Symbol S = new Symbol(sym.NOTEQUALS,new TokenVal(yyline+1, CharNum.num));
        CharNum.num = CharNum.num + 2;
        return S;
        }

">" { Symbol S = new Symbol(sym.GREATER,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return S;
        }

"<" { Symbol S = new Symbol(sym.LESS,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return S;
        }

"<=" { Symbol S = new Symbol(sym.LESSEQ,new TokenVal(yyline+1, CharNum.num));
        CharNum.num = CharNum.num + 2;
        return S;
        }

">=" { Symbol S = new Symbol(sym.GREATEREQ,new TokenVal(yyline+1, CharNum.num));
        CharNum.num = CharNum.num + 2;
        return S;
        }

"=" { Symbol S = new Symbol(sym.ASSIGN,new TokenVal(yyline+1, CharNum.num));
        CharNum.num++;
        return S;
        }

{DIGIT}+  { // NOTE: the following computation of the integer value does
            //       NOT check for overflow. This must be changed.
            int val = Integer.parseInt(yytext());

	    //If the value has overflowed set to max int
            if (val < 0) val = Integer.MAX_VALUE; 
	    
	    Symbol S = new Symbol(sym.INTLITERAL,
                             new IntLitTokenVal(yyline+1, CharNum.num, val));
            CharNum.num += yytext().length();
            return S;
          }

({LETTER}|"_")({LETTER}|{DIGIT}|"_")* {
		String val = yytext();
		Symbol S = new Symbol(sym.ID,
				new IdTokenVal(yyline+1, CharNum.num, val));
		CharNum.num += yytext().length();
		return S; 
	}

\n        { CharNum.num = 1; }

{COMMENT}.* {}

{WHITESPACE}+  { CharNum.num += yytext().length(); }

"+"       { Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

\"{STRINGTEXT}\"
	 {
            String val = yytext();
            Symbol S = new Symbol(sym.STRINGLITERAL,
                          new StrLitTokenVal(yyline+1, CharNum.num, val));
            CharNum.num += yytext().length(); 
            return S;
          }

\"{STRINGTEXT}$
          {
            ErrMsg.fatal(yyline+1, CharNum.num,
                          "ignoring unterminated string literal");
	    CharNum.num = 1;
           }
\"({STRINGTEXT}|(\\{BADESCAPECHAR}))*\"
          { ErrMsg.fatal(yyline+1, CharNum.num,
                          "ignoring string literal with bad escaped character");
	          CharNum.num += yytext().length();
          }

\"(({STRINGTEXT}|(\\{BADESCAPECHAR}))*)$
          { ErrMsg.fatal(yyline+1, CharNum.num,
                        "ignoring unterminated string literal " +
                        "with bad escaped character");
	    CharNum.num = 1;
          }

.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }

